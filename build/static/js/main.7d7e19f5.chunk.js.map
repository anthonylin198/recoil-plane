{"version":3,"sources":["gameState.js","App.js","index.js"],"names":["shipPositionState","atom","key","default","position","rotation","enemyPositionState","x","y","z","laserPositionState","scoreState","root","document","getElementById","LASER_RANGE","LASER_Z_VELOCITY","ENEMY_SPEED","GROUND_HEIGHT","Loading","react_default","a","createElement","visible","attach","args","color","transparent","opacity","roughness","metalness","Terrain","terrain","useRef","useFrame","current","Math","PI","ref","wireframe","ArWing","_useRecoilState","useRecoilState","_useRecoilState2","Object","slicedToArray","shipPosition","setShipPosition","ship","_ref","mouse","nodes","useLoader","GLTFLoader","geometry","Default","Target","rearTarget","frontTarget","texture","TextureLoader","load","_ref2","map","Enemies","enemies","useRecoilValue","enemy","concat","LaserController","_useRecoilState3","_useRecoilState4","lasers","setLasers","onClick","toConsumableArray","id","random","velocity","emissive","Lasers","laser","GameTimer","_useRecoilState5","_useRecoilState6","setEnemies","_useRecoilState7","_useRecoilState8","setLaserPositions","_useRecoilState9","_useRecoilState10","score","setScore","_ref3","hitEnemies","filter","length","includes","console","log","idx","App","Fragment","web","style","background","dist","recoilize","intensity","react","fallback","href","className","target","rel","rootElement","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7d7e19f5.chunk.js","sourcesContent":["import { atom } from \"recoil\";\r\n\r\nexport const shipPositionState = atom({\r\n  key: \"shipPosition\", // unique ID (with respect to other atoms/selectors)\r\n  default: { position: {}, rotation: {} } // default value (aka initial value)\r\n});\r\n\r\nexport const enemyPositionState = atom({\r\n  key: \"enemyPosition\", // unique ID (with respect to other atoms/selectors)\r\n  default: [{ x: -10, y: 10, z: -80 }, { x: 20, y: 20, z: -100 }] // default value (aka initial value)\r\n});\r\n\r\nexport const laserPositionState = atom({\r\n  key: \"laserPositions\", // unique ID (with respect to other atoms/selectors)\r\n  default: [] // default value (aka initial value)\r\n});\r\n\r\nexport const scoreState = atom({\r\n  key: \"score\", // unique ID (with respect to other atoms/selectors)\r\n  default: 0 // default value (aka initial value)\r\n});\r\n","import React, { Suspense, useRef } from 'react';\r\nimport { Canvas, useLoader, useFrame } from 'react-three-fiber';\r\nimport { RecoilRoot, useRecoilState, useRecoilValue } from 'recoil';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { TextureLoader } from 'three';\r\nimport {\r\n  shipPositionState,\r\n  enemyPositionState,\r\n  laserPositionState,\r\n  scoreState,\r\n} from './gameState';\r\nimport * as nodes from './gameState';\r\nimport './styles.css';\r\nimport RecoilizeDebugger from 'recoilize';\r\nconst root = document.getElementById('root');\r\n\r\n// Game settings.\r\nconst LASER_RANGE = 100;\r\nconst LASER_Z_VELOCITY = 1;\r\nconst ENEMY_SPEED = 0.1;\r\nconst GROUND_HEIGHT = -50;\r\n\r\n// Just a placeholder sphere to use with React Suspense while waiting for loaders to resolve.\r\nfunction Loading() {\r\n  return (\r\n    <mesh visible position={[0, 0, 0]} rotation={[0, 0, 0]}>\r\n      <sphereGeometry attach=\"geometry\" args={[1, 16, 16]} />\r\n      <meshStandardMaterial\r\n        attach=\"material\"\r\n        color=\"white\"\r\n        transparent\r\n        opacity={0.6}\r\n        roughness={1}\r\n        metalness={0}\r\n      />\r\n    </mesh>\r\n  );\r\n}\r\n\r\n// A Ground plane that moves relative to the player. The player stays at 0,0\r\nfunction Terrain() {\r\n  const terrain = useRef();\r\n\r\n  useFrame(() => {\r\n    terrain.current.position.z += 0.4;\r\n  });\r\n  // Returns a mesh at GROUND_HEIGHT below the player. Scaled to 5000, 5000 with 128 segments.\r\n  // X Rotation is -Math.PI / 2 which is 90 degrees in radians.\r\n  return (\r\n    <mesh\r\n      visible\r\n      position={[0, GROUND_HEIGHT, 0]}\r\n      rotation={[-Math.PI / 2, 0, 0]}\r\n      ref={terrain}\r\n    >\r\n      <planeBufferGeometry attach=\"geometry\" args={[5000, 5000, 128, 128]} />\r\n      <meshStandardMaterial\r\n        attach=\"material\"\r\n        color=\"white\"\r\n        roughness={1}\r\n        metalness={0}\r\n        wireframe\r\n      />\r\n    </mesh>\r\n  );\r\n}\r\n\r\n// The players ship model. On each frame, check the cursor position and move the ship to point in the\r\n// correct direction. Save ship position in state in order to drive other components like target reticle, and\r\n// laser velocity.\r\n\r\nfunction ArWing() {\r\n  const [shipPosition, setShipPosition] = useRecoilState(shipPositionState);\r\n\r\n  const ship = useRef();\r\n  useFrame(({ mouse }) => {\r\n    setShipPosition({\r\n      position: { x: mouse.x * 6, y: mouse.y * 2 },\r\n      rotation: { z: -mouse.x * 0.5, x: -mouse.x * 0.5, y: -mouse.y * 0.2 },\r\n    });\r\n  });\r\n  // Update the ships position from the updated state.\r\n  useFrame(() => {\r\n    ship.current.rotation.z = shipPosition.rotation.z;\r\n    ship.current.rotation.y = shipPosition.rotation.x;\r\n    ship.current.rotation.x = shipPosition.rotation.y;\r\n    ship.current.position.y = shipPosition.position.y;\r\n    ship.current.position.x = shipPosition.position.x;\r\n  });\r\n\r\n  const { nodes } = useLoader(GLTFLoader, 'models/arwing.glb');\r\n\r\n  return (\r\n    <group ref={ship}>\r\n      <mesh visible geometry={nodes.Default.geometry}>\r\n        <meshStandardMaterial\r\n          attach=\"material\"\r\n          color=\"white\"\r\n          roughness={1}\r\n          metalness={0}\r\n        />\r\n      </mesh>\r\n    </group>\r\n  );\r\n}\r\n\r\n// Draws two sprites in front of the ship indicating the direction of fire.\r\n// Uses a TextureLoader to load transparent PNG, and sprite to render on a 2d plane facing the camera.\r\nfunction Target() {\r\n  const rearTarget = useRef();\r\n  const frontTarget = useRef();\r\n\r\n  const loader = new TextureLoader();\r\n  // A png with transparency to use as the target sprite.\r\n  const texture = loader.load('target.png');\r\n\r\n  // Update the position of the reticle based on the ships current position.\r\n  useFrame(({ mouse }) => {\r\n    rearTarget.current.position.y = -mouse.y * 10;\r\n    rearTarget.current.position.x = -mouse.x * 30;\r\n\r\n    frontTarget.current.position.y = -mouse.y * 20;\r\n    frontTarget.current.position.x = -mouse.x * 60;\r\n  });\r\n  // Sprite material has a prop called map to set the texture on.\r\n  return (\r\n    <group>\r\n      <sprite position={[0, 0, -8]} ref={rearTarget}>\r\n        <spriteMaterial attach=\"material\" map={texture} />\r\n      </sprite>\r\n      <sprite position={[0, 0, -16]} ref={frontTarget}>\r\n        <spriteMaterial attach=\"material\" map={texture} />\r\n      </sprite>\r\n    </group>\r\n  );\r\n}\r\n\r\n// Manages Drawing enemies that currently exist in state\r\nfunction Enemies() {\r\n  const enemies = useRecoilValue(enemyPositionState);\r\n  return (\r\n    <group>\r\n      {enemies.map((enemy) => (\r\n        <mesh position={[enemy.x, enemy.y, enemy.z]} key={`${enemy.x}`}>\r\n          <sphereBufferGeometry attach=\"geometry\" args={[2, 8, 8]} />\r\n          <meshStandardMaterial attach=\"material\" color=\"white\" wireframe />\r\n        </mesh>\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n\r\n// An invisible clickable element in the front of the scene.\r\n// Manages creating lasers with the correct initial velocity on click.\r\nfunction LaserController() {\r\n  const shipPosition = useRecoilValue(shipPositionState);\r\n  const [lasers, setLasers] = useRecoilState(laserPositionState);\r\n  return (\r\n    <mesh\r\n      position={[0, 0, -8]}\r\n      onClick={() =>\r\n        setLasers([\r\n          ...lasers,\r\n          {\r\n            id: Math.random(), // This needs to be unique.. Random isn't perfect but it works. Could use a uuid here.\r\n            x: 0,\r\n            y: 0,\r\n            z: 0,\r\n            velocity: [\r\n              shipPosition.rotation.x * 6,\r\n              shipPosition.rotation.y * 5,\r\n            ],\r\n          },\r\n        ])\r\n      }\r\n    >\r\n      <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\r\n      <meshStandardMaterial\r\n        attach=\"material\"\r\n        color=\"orange\"\r\n        emissive=\"#ff0860\"\r\n        visible={false}\r\n      />\r\n    </mesh>\r\n  );\r\n}\r\n\r\n// Draws all of the lasers existing in state.\r\nfunction Lasers() {\r\n  const lasers = useRecoilValue(laserPositionState);\r\n  return (\r\n    <group>\r\n      {lasers.map((laser) => (\r\n        <mesh position={[laser.x, laser.y, laser.z]} key={`${laser.id}`}>\r\n          <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\r\n          <meshStandardMaterial attach=\"material\" emissive=\"white\" wireframe />\r\n        </mesh>\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n\r\n// This component runs game logic on each frame draw to update game state.\r\nfunction GameTimer() {\r\n  const [enemies, setEnemies] = useRecoilState(enemyPositionState);\r\n  const [lasers, setLaserPositions] = useRecoilState(laserPositionState);\r\n  const [score, setScore] = useRecoilState(scoreState);\r\n\r\n  useFrame(({ mouse }) => {\r\n    // Calculate hits and remove lasers and enemies, increase score.\r\n\r\n    const hitEnemies = enemies\r\n      ? enemies.map(\r\n          (enemy) =>\r\n            lasers.filter(\r\n              (laser) =>\r\n                laser.z - enemy.z < 1 &&\r\n                laser.x - enemy.x < 1 &&\r\n                laser.y - enemy.y < 1\r\n            ).length > 0\r\n        )\r\n      : [];\r\n\r\n    if (hitEnemies.includes(true) && enemies.length > 0) {\r\n      setScore(score + 1);\r\n      console.log('hit detected');\r\n    }\r\n\r\n    // Move all of the enemies. Remove enemies that have been destroyed, or passed the player.\r\n    setEnemies(\r\n      enemies\r\n        .map((enemy) => ({ x: enemy.x, y: enemy.y, z: enemy.z + ENEMY_SPEED }))\r\n        .filter((enemy, idx) => !hitEnemies[idx] && enemy.z < 0)\r\n    );\r\n    // Move the Lasers and remove lasers at end of range or that have hit the ground.\r\n    setLaserPositions(\r\n      lasers\r\n        .map((laser) => ({\r\n          id: laser.id,\r\n          x: laser.x + laser.velocity[0],\r\n          y: laser.y + laser.velocity[1],\r\n          z: laser.z - LASER_Z_VELOCITY,\r\n          velocity: laser.velocity,\r\n        }))\r\n        .filter((laser) => laser.z > -LASER_RANGE && laser.y > GROUND_HEIGHT)\r\n    );\r\n  });\r\n  return null;\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <>\r\n      <Canvas style={{ background: 'black' }}>\r\n        <RecoilRoot>\r\n          <RecoilizeDebugger nodes={nodes} root={root} />\r\n          <directionalLight intensity={1} />\r\n          <ambientLight intensity={0.1} />\r\n          <Suspense fallback={<Loading />}>\r\n            <ArWing />\r\n          </Suspense>\r\n          <Target />\r\n          <Enemies />\r\n          <Lasers />\r\n          <Terrain />\r\n          <LaserController />\r\n          <GameTimer />\r\n        </RecoilRoot>\r\n      </Canvas>\r\n\r\n      <a\r\n        href=\"https://codeworkshop.dev/blog/2020-06-23-build-a-game-with-react-three-fiber-and-recoil/\"\r\n        className=\"blog-link\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Blog Post\r\n      </a>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}